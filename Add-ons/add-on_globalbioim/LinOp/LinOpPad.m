classdef LinOpPad < LinOp
    % LinOpPad: Padding operator on both side of the input
    % 
    % :param sz_in: size of the input that must be padded
    % 
    % :param sz_out: size to which the input must be padded
    %
    % :param padValue: the padding value (default = 0, see notes)
    %   - 'median': padding by the median value
    %   - 'mean': padding by the mean value
    %   - scalar: padding by a scalar value
    %
    % All attributes of parent class :class:`LinOp` are inherited. 
    %
    % **Note**: 
    %   1. it is possible to pad with values different from 0 but in that
    % case the padding operation is not linear.
    %   2. this operator is implemented for a number of dimensions
    % lower than 5
    %
    % **Example** Pad = LinOpPad(sz_in, sz_out)
    %
    % **Example** Pad = LinOpPad(sz_in, sz_out, padValue)
    %
    % See also :class:`Map` :class:`LinOp`
  
    %%    Copyright (C) 2018
    %     Created: 03/27/2018 (mm/dd/yyyy)
    %     Anthony Berdeu (Laboratoire Hubert Curien)
    %
    %     This program is free software: you can redistribute it and/or modify
    %     it under the terms of the GNU General Public License as published by
    %     the Free Software Foundation, either version 3 of the License, or
    %     (at your option) any later version.
    %
    %     This program is distributed in the hope that it will be useful,
    %     but WITHOUT ANY WARRANTY; without even the implied warranty of
    %     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    %     GNU General Public License for more details.
    %
    %     You should have received a copy of the GNU General Public License
    %     along with this program.  If not, see <http://www.gnu.org/licenses/>.

    properties
        ndms;       % number of dimensions
        padValue;   % the padding value
    end
    
    %% Constructor
    methods
        function this = LinOpPad(varargin)
            this.name = 'LinOpPad' ;
            this.isInvertible = false ;
            this.sizein = varargin{1} ;
            this.sizeout = varargin{2} ;
            this.ndms = length(this.sizein) ;
            
            % Test if the number of dimensions of the input and the output
            % are the same
            if length(this.sizein)~=length(this.sizeout)
                error(['Input and output number of dimensions does', ...
                    'not match.']) ;
            end
            
            % Test if the padding is possible: the output dimensions must
            % be bigger than the input dimensions
            if sum(this.sizein>this.sizeout)
                error(['Impossible to 0-pad a dimension to a shorter', ...
                    ' length']) ;
            end
            
            % Test if the number of dimensions is lower than 5
            if this.ndms>5
                error(['LinOpPad not implemented for number of', ...
                    ' dimensions > 5']) ;
            end
            
            % Padding value
            if nargin>2
                this.padValue = varargin{3} ;
            else
                this.padValue = 0 ;
            end
            
            if ischar(this.padValue)
                switch this.padValue
                    case {'median', 'mean'}
                        warning(['Padding value different from 0. ', ...
                            'The operator is not linear...']) ;
                    otherwise
                    error('Unknown padding technique...') ;
                end
            elseif isscalar(this.padValue)
                if this.padValue ~= 0
                    warning(['Padding value different from 0. ', ...
                        'The operator is not linear...']) ;
                end
            else
                error('Unknown padding technique...') ;
            end
            
		end
    end
	
    %% Core Methods containing implementations (Protected)
    % - apply_(this,x)
    % - applyAdjoint_(this,x)
	methods (Access = protected)
        %% apply_
        function y = apply_(this,x)   
            % Reimplemented from parent class :class:`LinOp`.
            if sum(this.sizein == this.sizeout)==this.ndms
                y = x ;
            else
                if isscalar(this.padValue)
                    y = this.padValue*ones(this.sizeout) ;
                else
                    switch this.padValue
                        case 'mean'
                            y = mean(x(:))*ones(this.sizeout) ;
                        case 'median'
                            y = median(x(:))*ones(this.sizeout) ;
                    end
                end
                switch this.ndms
                    case 1
                        y( ...
                            (1:this.sizein(1)) + ...
                            floor(this.sizeout(1)/2) - ...
                            floor(this.sizein(1)/2) ... % dim 1
                            ) = x ;
                    case 2
                        y( ...
                            (1:this.sizein(1)) + ...
                            floor(this.sizeout(1)/2) - ...
                            floor(this.sizein(1)/2) ... % dim 1
                            , ...
                            (1:this.sizein(2)) + ...
                            floor(this.sizeout(2)/2) - ...
                            floor(this.sizein(2)/2) ... % dim 2
                            ) = x ;
                    case 3
                        y( ...
                            (1:this.sizein(1)) + ...
                            floor(this.sizeout(1)/2) - ...
                            floor(this.sizein(1)/2) ... % dim 1
                            , ...
                            (1:this.sizein(2)) + ...
                            floor(this.sizeout(2)/2) - ...
                            floor(this.sizein(2)/2) ... % dim 2
                            , ...
                            (1:this.sizein(3)) + ...
                            floor(this.sizeout(3)/2) - ...
                            floor(this.sizein(3)/2) ... % dim 3
                            ) = x ;
                    case 4
                        y( ...
                            (1:this.sizein(1)) + ...
                            floor(this.sizeout(1)/2) - ...
                            floor(this.sizein(1)/2) ... % dim 1
                            , ...
                            (1:this.sizein(2)) + ...
                            floor(this.sizeout(2)/2) - ...
                            floor(this.sizein(2)/2) ... % dim 2
                            , ...
                            (1:this.sizein(3)) + ...
                            floor(this.sizeout(3)/2) - ...
                            floor(this.sizein(3)/2) ... % dim 3
                            , ...
                            (1:this.sizein(4)) + ...
                            floor(this.sizeout(4)/2) - ...
                            floor(this.sizein(4)/2) ... % dim 4
                            ) = x ;
                    case 5
                        y( ...
                            (1:this.sizein(1)) + ...
                            floor(this.sizeout(1)/2) - ...
                            floor(this.sizein(1)/2) ... % dim 1
                            , ...
                            (1:this.sizein(2)) + ...
                            floor(this.sizeout(2)/2) - ...
                            floor(this.sizein(2)/2) ... % dim 2
                            , ...
                            (1:this.sizein(3)) + ...
                            floor(this.sizeout(3)/2) - ...
                            floor(this.sizein(3)/2) ... % dim 3
                            , ...
                            (1:this.sizein(4)) + ...
                            floor(this.sizeout(4)/2) - ...
                            floor(this.sizein(4)/2) ... % dim 4
                            , ...
                            (1:this.sizein(5)) + ...
                            floor(this.sizeout(5)/2) - ...
                            floor(this.sizein(5)/2) ... % dim 5
                            ) = x ;
                end
            end
        end
        
        %% applyAdjoint_
        function y = applyAdjoint_(this,x)            
            % Reimplemented from parent class :class:`LinOp`.
            if sum(this.sizein == this.sizeout)==this.ndms
                y = x ;
            else
                switch this.ndms
                    case 1
                        y = x( ...
                            (1:this.sizein(1)) + ...
                            floor(this.sizeout(1)/2) - ...
                            floor(this.sizein(1)/2) ... % dim 1
                            ) ;
                    case 2
                        y = x( ...
                            (1:this.sizein(1)) + ...
                            floor(this.sizeout(1)/2) - ...
                            floor(this.sizein(1)/2) ... % dim 1
                            , ...
                            (1:this.sizein(2)) + ...
                            floor(this.sizeout(2)/2) - ...
                            floor(this.sizein(2)/2) ... % dim 2
                            ) ;
                    case 3
                        y = x( ...
                            (1:this.sizein(1)) + ...
                            floor(this.sizeout(1)/2) - ...
                            floor(this.sizein(1)/2) ... % dim 1
                            , ...
                            (1:this.sizein(2)) + ...
                            floor(this.sizeout(2)/2) - ...
                            floor(this.sizein(2)/2) ... % dim 2
                            , ...
                            (1:this.sizein(3)) + ...
                            floor(this.sizeout(3)/2) - ...
                            floor(this.sizein(3)/2) ... % dim 3
                            ) ;
                    case 4
                        y = x( ...
                            (1:this.sizein(1)) + ...
                            floor(this.sizeout(1)/2) - ...
                            floor(this.sizein(1)/2) ... % dim 1
                            , ...
                            (1:this.sizein(2)) + ...
                            floor(this.sizeout(2)/2) - ...
                            floor(this.sizein(2)/2) ... % dim 2
                            , ...
                            (1:this.sizein(3)) + ...
                            floor(this.sizeout(3)/2) - ...
                            floor(this.sizein(3)/2) ... % dim 3
                            , ...
                            (1:this.sizein(4)) + ...
                            floor(this.sizeout(4)/2) - ...
                            floor(this.sizein(4)/2) ... % dim 4
                            ) ;
                    case 5
                        y = x( ...
                            (1:this.sizein(1)) + ...
                            floor(this.sizeout(1)/2) - ...
                            floor(this.sizein(1)/2) ... % dim 1
                            , ...
                            (1:this.sizein(2)) + ...
                            floor(this.sizeout(2)/2) - ...
                            floor(this.sizein(2)/2) ... % dim 2
                            , ...
                            (1:this.sizein(3)) + ...
                            floor(this.sizeout(3)/2) - ...
                            floor(this.sizein(3)/2) ... % dim 3
                            , ...
                            (1:this.sizein(4)) + ...
                            floor(this.sizeout(4)/2) - ...
                            floor(this.sizein(4)/2) ... % dim 4
                            , ...
                            (1:this.sizein(5)) + ...
                            floor(this.sizeout(5)/2) - ...
                            floor(this.sizein(5)/2) ... % dim 5
                            ) ;
                end
            end
        end
        
        %% applyHtH_
        function y = applyHtH_(~,x)
            % Reimplemented from parent class :class:`LinOp`.
            y = x ;
        end
        
        %% applyHHt_
        function y = applyHHt_(this,x)            
            % Reimplemented from parent class :class:`LinOp`.
            if sum(this.sizein == this.sizeout)==this.ndms
                y = x ;
            else
                if isscalar(this.padValue)
                    y = this.padValue*ones(this.sizeout) ;
                else
                    switch this.padValue
                        case 'mean'
                            y = mean(x(:))*ones(this.sizeout) ;
                        case 'median'
                            y = median(x(:))*ones(this.sizeout) ;
                    end
                end
                switch this.ndms
                    case 1
                        y( ...
                            (1:this.sizein(1)) + ...
                            floor(this.sizeout(1)/2) - ...
                            floor(this.sizein(1)/2) ... % dim 1
                            ) = x( ...
                            (1:this.sizein(1)) + ...
                            floor(this.sizeout(1)/2) - ...
                            floor(this.sizein(1)/2) ... % dim 1
                            ) ;
                    case 2
                        y( ...
                            (1:this.sizein(1)) + ...
                            floor(this.sizeout(1)/2) - ...
                            floor(this.sizein(1)/2) ... % dim 1
                            , ...
                            (1:this.sizein(2)) + ...
                            floor(this.sizeout(2)/2) - ...
                            floor(this.sizein(2)/2) ... % dim 2
                            ) = x( ...
                            (1:this.sizein(1)) + ...
                            floor(this.sizeout(1)/2) - ...
                            floor(this.sizein(1)/2) ... % dim 1
                            , ...
                            (1:this.sizein(2)) + ...
                            floor(this.sizeout(2)/2) - ...
                            floor(this.sizein(2)/2) ... % dim 2
                            ) ;
                    case 3
                        y( ...
                            (1:this.sizein(1)) + ...
                            floor(this.sizeout(1)/2) - ...
                            floor(this.sizein(1)/2) ... % dim 1
                            , ...
                            (1:this.sizein(2)) + ...
                            floor(this.sizeout(2)/2) - ...
                            floor(this.sizein(2)/2) ... % dim 2
                            , ...
                            (1:this.sizein(3)) + ...
                            floor(this.sizeout(3)/2) - ...
                            floor(this.sizein(3)/2) ... % dim 3
                            ) = x( ...
                            (1:this.sizein(1)) + ...
                            floor(this.sizeout(1)/2) - ...
                            floor(this.sizein(1)/2) ... % dim 1
                            , ...
                            (1:this.sizein(2)) + ...
                            floor(this.sizeout(2)/2) - ...
                            floor(this.sizein(2)/2) ... % dim 2
                            , ...
                            (1:this.sizein(3)) + ...
                            floor(this.sizeout(3)/2) - ...
                            floor(this.sizein(3)/2) ... % dim 3
                            ) ;
                    case 4
                        y( ...
                            (1:this.sizein(1)) + ...
                            floor(this.sizeout(1)/2) - ...
                            floor(this.sizein(1)/2) ... % dim 1
                            , ...
                            (1:this.sizein(2)) + ...
                            floor(this.sizeout(2)/2) - ...
                            floor(this.sizein(2)/2) ... % dim 2
                            , ...
                            (1:this.sizein(3)) + ...
                            floor(this.sizeout(3)/2) - ...
                            floor(this.sizein(3)/2) ... % dim 3
                            , ...
                            (1:this.sizein(4)) + ...
                            floor(this.sizeout(4)/2) - ...
                            floor(this.sizein(4)/2) ... % dim 4
                            ) = x( ...
                            (1:this.sizein(1)) + ...
                            floor(this.sizeout(1)/2) - ...
                            floor(this.sizein(1)/2) ... % dim 1
                            , ...
                            (1:this.sizein(2)) + ...
                            floor(this.sizeout(2)/2) - ...
                            floor(this.sizein(2)/2) ... % dim 2
                            , ...
                            (1:this.sizein(3)) + ...
                            floor(this.sizeout(3)/2) - ...
                            floor(this.sizein(3)/2) ... % dim 3
                            , ...
                            (1:this.sizein(4)) + ...
                            floor(this.sizeout(4)/2) - ...
                            floor(this.sizein(4)/2) ... % dim 4
                            ) ;
                    case 5
                        y( ...
                            (1:this.sizein(1)) + ...
                            floor(this.sizeout(1)/2) - ...
                            floor(this.sizein(1)/2) ... % dim 1
                            , ...
                            (1:this.sizein(2)) + ...
                            floor(this.sizeout(2)/2) - ...
                            floor(this.sizein(2)/2) ... % dim 2
                            , ...
                            (1:this.sizein(3)) + ...
                            floor(this.sizeout(3)/2) - ...
                            floor(this.sizein(3)/2) ... % dim 3
                            , ...
                            (1:this.sizein(4)) + ...
                            floor(this.sizeout(4)/2) - ...
                            floor(this.sizein(4)/2) ... % dim 4
                            , ...
                            (1:this.sizein(5)) + ...
                            floor(this.sizeout(5)/2) - ...
                            floor(this.sizein(5)/2) ... % dim 5
                            ) = x( ...
                            (1:this.sizein(1)) + ...
                            floor(this.sizeout(1)/2) - ...
                            floor(this.sizein(1)/2) ... % dim 1
                            , ...
                            (1:this.sizein(2)) + ...
                            floor(this.sizeout(2)/2) - ...
                            floor(this.sizein(2)/2) ... % dim 2
                            , ...
                            (1:this.sizein(3)) + ...
                            floor(this.sizeout(3)/2) - ...
                            floor(this.sizein(3)/2) ... % dim 3
                            , ...
                            (1:this.sizein(4)) + ...
                            floor(this.sizeout(4)/2) - ...
                            floor(this.sizein(4)/2) ... % dim 4
                            , ...
                            (1:this.sizein(5)) + ...
                            floor(this.sizeout(5)/2) - ...
                            floor(this.sizein(5)/2) ... % dim 5
                            ) ;
                end
            end
        end
		
        %% makeHtH_
        function M = makeHtH_(this)
            % Reimplemented from parent class :class:`LinOp`.
            M = LinOpDiag(this.sizein);
        end
    end
end
